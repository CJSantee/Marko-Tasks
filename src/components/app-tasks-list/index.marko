import { getTasks, createTask, toggleTask, deleteTask } from "../../services/tasks/api";

class {
	onInput(input) {
		const { tasksData } = input;
		let tasks = [];

		if (tasksData) {
			tasks = tasksData.tasks;
		}

		this.state = {
			loading: false,
			tasks: tasks,
			newTaskInput: false,
			newTask: {
				title: null,
				details: null,
				complete: false
			}
		};
	}

	onMount() {
		if (this.state.tasks.length === 0) {
			this.loadTasks();
		}
	}

	// Fetch Tasks from API
	async loadTasks() {
		const { state } = this;

		state.loading = true;

		try {
			const tasksData = await getTasks();
			state.tasks = state.tasks = tasksData;
		} catch (err) {
			console.log("Fetch failed:", err);
		}

		state.loading = false;
	}

	handleAddTaskClick() {
		this.state.newTaskInput = true;
	}

	async postTask() {
		try {
			const res = await createTask(this.state.newTask);
			this.loadTasks();
		} catch (err) {
			console.log("Post failed:", err);
		}
	}

	handleSubmitTaskClick() {
		this.postTask();
	}

	async deleteTask(_id) {
		try {
			const res = await deleteTask(_id);
			this.loadTasks();
		} catch (err) {
			console.log("Delete failed:", err);
		}
	}

	handleDeleteTaskClick(event) {
		const { data: { id } } = event;
		this.deleteTask(id);
	}

	async toggleTask(data) {
		try {
			const res = await toggleTask(data);
		} catch (err) {
			console.log("Patch failed:", err);
		}
	}

	handleTaskCompleteToggle(event) {
		const { checked, data: { id }} = event;
		this.toggleTask({id: id, complete: checked});
	}

	handleInputTitleChange(e) {
		this.state.newTask.title = e.target.value;
	}

	handleInputDetailsChange(e) {
		this.state.newTask.details = e.target.value;
	}
	
}

<div.app-tasks-list>
	<if(state.newTaskInput)>
		<div class="task-group-item">
			<div class="task-group-inputs" style={width: "100%"}>
				<input type="text" class="task-group-item__input" placeholder="Title" value=(state.newTask.title) on-change("handleInputTitleChange")>
				<input type="text" class="task-group-item__input" placeholder="Details" value=(state.newTask.details) on-change("handleInputDetailsChange")>
			</div>
			<div class="task-group-button mt-1">
				<app-button label="Submit" size="small" onClick("handleSubmitTaskClick")/>
			</div>
		</div>
	</if>
	<else>
		<div class="add-task-row">
			<button class="add-task-row__button" onClick("handleAddTaskClick")>
				<span>
					<svg width="20" height="20" viewBox="0 0 24 24">
						<path d="M22 5.18 10.59 16.6l-4.24-4.24 1.41-1.41 2.83 2.83 10-10L22 5.18zM12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8c1.57 0 3.04.46 4.28 1.25l1.45-1.45C16.1 2.67 14.13 2 12 2 6.48 2 2 6.48 2 12s4.48 10 10 10c1.73 0 3.36-.44 4.78-1.22l-1.5-1.5c-1 .46-2.11.72-3.28.72zm7-5h-3v2h3v3h2v-3h3v-2h-3v-3h-2v3z" fill="#0000aa"></path>
					</svg>
				</span>
				<p>Add a task</p>
			</button>
			<app-menu menuItems=(["My order", "Date", "Rename list"])/>
		</div>
	</else>
	
	<if(state.tasks.length)>	
		<div class="task-group">
			<for|task, index| of=state.tasks>
				<div class="task-group-item">
					<div class="task-item-check">
						<app-task-check checked=(task.complete) data={ id: task.id } onToggle("handleTaskCompleteToggle")/>
					</div>
					<div class="task-text">
						<p class="task-text__title">
							${task.title}
						</p>
						<p class="task-text__details">
							${task.details}
						</p>
					</div>
					<div class="">
						<app-button label="delete" size="small" data={ id: task.id } onClick("handleDeleteTaskClick")/>
					</div>
				</div>
			</for>
		</div>
	</if>
</div>